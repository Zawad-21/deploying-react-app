{"version":3,"sources":["recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","img","calories","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipies","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","action","type","value","onChange","target","label","image","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"qRAiBeA,EAdA,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,MAAiBC,GAAsB,EAAhCC,SAAgC,EAAtBD,KAAKE,EAAiB,EAAjBA,YACnC,OACI,sBAAKC,UAAWC,IAAMC,OAAtB,UACI,6BAAKN,IACL,6BACKG,EAAYI,KAAI,SAAAC,GAAU,OACvB,6BAAKA,EAAWC,YAGxB,qBAAKC,IAAKT,EAAKU,IAAI,SCwChBC,MAhDf,WAEE,IAFa,EAMkBC,mBAAS,IAN3B,mBAMNC,EANM,KAMGC,EANH,OAOeF,mBAAS,IAPxB,mBAONG,EAPM,KAOEC,EAPF,OAQaJ,mBAAS,IARtB,mBAQNK,EARM,KAQCC,EARD,KAUbC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAbf,WAae,oBAZb,mCAYa,sDADX,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAYW,EAAKC,MAHA,2CAAH,qDAgBhB,OACE,sBAAKvB,UAAU,MAAf,UACE,iEACA,wDACA,uBAAMwB,SAVQ,SAAAC,GAChBA,EAAEC,iBACFX,EAASH,GACTC,EAAU,KAOmBb,UAAU,cAAc2B,OAAO,GAA1D,UACE,uBAAO3B,UAAU,aAAa4B,KAAK,OAAOC,MAAOjB,EAAQkB,SAf1C,SAAAL,GACnBZ,EAAUY,EAAEM,OAAOF,UAef,wBAAQ7B,UAAU,gBAAgB4B,KAAK,SAAvC,uBAEF,qBAAK5B,UAAU,UAAf,SACGU,EAAQP,KAAI,SAAAD,GAAM,OACjB,cAAC,EAAD,CAAQH,YAAaG,EAAOA,OAAOH,YAA8BH,MAAOM,EAAOA,OAAO8B,MAAOlC,SAAUI,EAAOA,OAAOJ,SAAUD,IAAKK,EAAOA,OAAO+B,OAA7F/B,EAAOgC,cChCvDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,0B","file":"static/js/main.b3490ca1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport style from \"./recipe.module.css\";\r\n\r\nconst Recipe = ({title, calories, img, ingredients}) => {\r\n    return(\r\n        <div className={style.recipe}>\r\n            <h3>{title}</h3>\r\n            <ol>\r\n                {ingredients.map(ingredient => (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <img src={img} alt=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe;","import \"./App.css\";\nimport React, { useEffect, useState } from 'react';\nimport Recipe from \"./recipe\";\n\nfunction App() {\n\n  const APP_ID = '2a4e6bc3'\n  const APP_KEYS = 'e3987cbba01151da7bac1429610bfc49'\n  //const BASE_URL = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEYS}&from=0&to=10&calories=591-722&health=alcohol-free`\n\n  const [recipes, setRecipies] = useState([])\n  const [search, setSearch] = useState('')\n  const [query, setQuery] = useState('')\n\n  useEffect(() => {\n    getRecipes()\n  }, [query])\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEYS}&from=0&to=100&health=alcohol-free&mealType=lunch`)\n    const data = await response.json()\n    setRecipies(data.hits)\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value)\n  }\n\n  const getSearch = e => {\n    e.preventDefault()\n    setQuery(search)\n    setSearch('')\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Search for any recipe you like!</h1>\n      <h5>(i.e. search 'shrimp')</h5>\n      <form onSubmit={getSearch} className='search-form' action=\"\">\n        <input className='search-bar' type=\"text\" value={search} onChange={updateSearch}/>\n        <button className='search-button' type='submit'>Search</button>\n      </form>\n      <div className='recipes'>\n        {recipes.map(recipe => (\n          <Recipe ingredients={recipe.recipe.ingredients} key={recipe.key} title={recipe.recipe.label} calories={recipe.recipe.calories} img={recipe.recipe.image}/>\n          \n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1Snov\"};"],"sourceRoot":""}